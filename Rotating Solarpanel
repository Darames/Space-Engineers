public Program(){Runtime.UpdateFrequency = UpdateFrequency.Update10;} 

string solarSensorEastTag = "[Down SSE]";
string solarSensorWestTag = "[Down SSW]";
string oxFarmTag = "[Down OxFarm]";
string lcdTag = "[Down Lcd]";
string rotorYawTag = "[Down RY]";
string rotorNodTag = "[Down RN]";

//bool Day;
double solarEastConstPower;
double solarWestConstPower;
bool rotateYawPositive;

public class SolarPannel{
	public string Name {get; set;}
	public int Output {get;}
	
	void SetDetail(string name){
		var solarPanel = new List<IMyTerminalBlock>(); 
		GridTerminalSystem.SearchBlocksOfName(name, solarPanel);
		solarPanel = solarPanel[0].CustomName;
		IMySolarPanel solarPanel = GridTerminalSystem.GetBlockWithName(solarPanel) as IMySolarPanel;
		
		var info = solarPanel.DetailedInfo;
		var lines = info.Split('\n');
		var output = lines[2].Split(':')[1].Trim().Split(null)[1].Trim();
		
		Output = output;
	}
	public SolarPannel(string name){Name = name; Output = SetDetail(ref Name);}
	public void Update(){Output = SetDetail(ref Name);}
}
	
public class OxFarm{
	public string Name {get; set;}
	public int Output {get;}
	
	void SetDetail(){
		var oxFarmList = new List<IMyTerminalBlock>(); 
		GridTerminalSystem.SearchBlocksOfName(oxFarmTag, oxFarmList);
		oxFarm = oxFarmList[0].CustomName;
		IMyOxygenFarm oxFarm = GridTerminalSystem.GetBlockWithName(oxFarm) as IMyOxygenFarm;
		
		var info = oxFarm.DetailedInfo;
		var lines = info.Split('\n');
		var output = lines[2].Split(':')[1].Trim().Split(null)[1].Trim();
		
		Output = output;
	}
	public OxFarm(){Name = OxFarm; Output = SetDetail();}
	public void Update(){Output = SetDetail();}
}

public class LcdPannels{
	public string lcdText {get; set;}
	
	void SetText(ref string lcdText){
		var lcdList = new List<IMyTerminalBlock>(); 
		GridTerminalSystem.SearchBlocksOfName(lcdTag, lcdList);
		for (int i=0; i<lcdList.Count; i++) 
		{ 
		  var lcd_X_Name = lcdList[i].CustomName; 
		  IMyTextPanel lcd_X = GridTerminalSystem.GetBlockWithName(lcd_X_Name) as IMyTextPanel; 
		 
		  lcd_X.SetValue("FontColor", new Color(255,255,255));	// White 
		  lcd_X.SetValue("FontSize", 1.00f);	// set Font size of your LCD 
		  //lcd_X.SetValue("Font", (long)1147350002); 
		  lcd_X.ShowPublicTextOnScreen();

		  lcd_X.WritePublicText(lcdText, false); 
		}
	}
	public LcdPannels(string lcdText){SetText(ref lcdText);}
	public void Update(string lcdText){SetText(ref lcdText);}
}

public class Rotor{
	public var Rotor {get;}
	
	var Rotor(string name){
		var rotor = new List<IMyTerminalBlock>(); 
		GridTerminalSystem.SearchBlocksOfName(name, rotor);
		rotor = rotor[0].CustomName;
		IMyMotorStator rotor = GridTerminalSystem.GetBlockWithName(rotor) as IMyMotorStator;
		
		return rotor;
	}
	public Rotor(){Rotor = Rotor();}
}

public void Main(string argument, UpdateType updateSource)
{
	string lcdText ="";
	double solarEastPower = 0;
	double solarWestPower = 0;
	
	SolarPannel solarEast = new SolarPannel(solarSensorEastTag);
	SolarPannel solarWest = new SolarPannel(solarSensorWestTag);
	LcdPannels lcdPannels = new LcdPannels(lcdText);
	OxFarm oxFarm = new OxFarm();
	Rotor yaw = new Rotor(rotorYawTag);
	Rotor nod = new Rotor(rotorNodTag);
		
	// Get Output SolarEast
	solarEastPower = solarEast.Output;
	lcdText += $"solarEast {solarEast.Output} \n";
	// Get Output SolarWest
	solarWestPower = solarWest.Output;
	lcdText += $"solarWest {solarWest.Output} \n";
	// Get Output OxFarm
	lcdText += $"oxFarm {oxFarm.Output} \n";
	
	// Write in LCD Panels
	lcdPannels.Update(lcdText);
	
	// Turn Rotor Yaw on Energy Los
	if(solarEastPower < solarEastConstPower && rotateYawPositive == true){
		yaw.Rotor.ApplyAction("ResetVelocity");
		yaw.Rotor.ApplyAction("DecreaseTorque");
	} else {
		yaw.Rotor.ApplyAction("ResetVelocity");
		yaw.Rotor.ApplyAction("IncreaseTorque ");
	}
	
	solarEastConstPower = solarEastPower;
}


